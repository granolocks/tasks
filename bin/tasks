#!/usr/bin/env ruby

# set path to ../../lib/ as $TASKS_CODE_DIR in env
CODE_DIR = ENV["TASKS_CODE_DIR"]

unless CODE_DIR
  puts "Must set location of lib directory as $TASKS_CODE_DIR in environment"
end

$:.unshift(CODE_DIR)

require 'tasks'
require 'optparse'

options = {}

OptionParser.new do |opts|
  case ARGV[0]
  when "add"
    options[:command] = "add"

    opts.on("-t", "--title TITLE", String, "Title of todo, best if brief") do |title|
      options[:title] = title
    end

    opts.on("-d", "--description DESCRIPTION", String, "Longer description of todo") do |description|
      options[:description] = description
    end 

    opts.on(
      "-p", "--priority PRIORITY", Integer, 
      "Numeric priority to help sort tasks, default is zero..."
    ) do |priority|
      options[:priority] = priority
    end

    opts.on(
      "-c", "--categories CATEGORIES", String, 
      "comma separated list of categories"
    ) do |cat|
      options[:categories] = cat.split(',').map(&:strip)
    end

    opts.on( "-h", "--help", "Print help info") do |x| options[:help] = true
    end

  when "rm"
    options[:command] = "rm"
    if ARGV[1]
      options[:id] = ARGV[1].to_i
    else
      opts.on("-i", "--id INT", Integer, "Suppress output and run in daemon mode") do |id|
        options[:id] = id
      end
    end
  when "help"
    options[:command] = "help"
  when "-h"
    options[:command] = "help"
  else
    options[:command] = "list"
    opts.on( "-a", "--all", "List completed tasks as well..") do |x|
      options[:all] = true
    end

    opts.on("-c", "--category CATEGORY", String, "Category to filter with") do |cat|
      options[:category] = cat
    end
  end
end.parse!

case options[:command]
when  "help"
  puts <<HELP
You  need more arguments for this to work...  
Options: 
#{__FILE__} list
#{__FILE__} add
#{__FILE__} rm
HELP
when "list"
  Task.print_table(options)
when "add"
  if options[:help]
    puts <<ADDHELP
Usage:
#{__FILE__} -t TITLE -d DESCRIPTION -p PRIORITY
#{__FILE__} --title TITLE --description DESCRIPTION --priority PRIORITY
ADDHELP

  else
    t = Task.new
    t.title = options[:title]
    t.priority = options[:priority] || 0
    t.description = options[:description]
    if t.save
      if options[:categories]
        options[:categories].each do |name|
          c = Category.all(name: name).first
          unless c
            c = Category.new(name: name)
            c.save
          end
          cc = Categorization.new(category: c, task: t)
          cc.save
        end
      end
      puts "Task added! (^_^)"
    else
      puts "Task could not be saved... (>_<)"
    end
  end
when "rm"
  case options[:id]
  when nil
    puts "Usage:" 
    puts "#{__FILE__} rm --id <ID>"
    puts "#{__FILE__} rm -i <ID>"
  else
    if t = Task.get(options[:id])
      t.complete!
      puts [
        "Nice job!",
        "Fuck yea!",
        "Git'r'done!",
        "Fire in the hole!", 
        "Burning down the house!",
        "You're killin' it kid!"
      ].shuffle.first
    else
      puts "Invalid ID, try #{__FILE__} list for all ids"
    end
  end
end
